" Desc: wanghan's _vimrc for gvim windows
" Date: 2018.07.23

" TODO
" 1. platform compatibility
" 2. font
" 3. color
" 3. use system clipboard

" {{{ Gvim
set langmenu=en_US                  " Set language to english
let $LANG='en_US.UTF-8'
set clipboard+=unnamed              " Add system clipboard to vim

" Auto copy text selected by mouse
set guioptions+=A

" Cursor Setting
set guicursor=a:block-Cursor
highlight Cursor guifg=white guibg=black
set guicursor+=i:block-iCursor
highlight iCursor guifg=white guibg=steelblue
set guicursor+=n-v-i-c:blinkwait600-blinkon600-blinkoff350    "blinkwait: delay before cursor start blinking, blinkon/off: cursor the time that show/not show
" }}}

" {{{ General
filetype indent plugin on           " turn on filtype detection, indent, plugin
syntax on
set backspace=indent,eol,start      " or set backspace=2, make backspace work like most other programs
set ruler                           " line number, column number, relative position at right bottom
set wrap                            " wrap too long line
set hls                             " highlight search results
set noincsearch                     " diable incremental search
set noshowmode                      " we use lightline plugin instead of default status line
set tabstop=4                       " tab width=4
set shiftwidth=4                    " shift width-4
set expandtab                       " On pressing tab, expand to space
set showmatch                       " show match brackets
set cinoptions=g-1                  " cindent style
set foldmethod=syntax
set foldlevel=99                    " set fold level to not fold at first
set cursorline                      " highlight current line
set laststatus=2                    " always display status line
set scrolloff=0                     " force no line above and below cursor when scrolling
set fileencodings=utf-8,ucs-bom,gbk2312,gbk,gb18030,cp936   " set candidate encodings for an existing file.
set encoding=latin1                 " default encoding of input
" set fileencoding=latin1           " default encoding for save file
set lcs=tab:>-,trail:-      " Set chars to display invisible characters (:list! to toggle invisible symbol display)

" Remeber last exit postion for file
set viminfo='10,\"100,:20,%,n~/_viminfo
function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction
augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END

augroup wanghan_vim
    " Remove all other autocmds
    au!
    " Enable marker and fold all maker for vim files
    au filetype vim setlocal foldmethod=marker | setlocal foldlevel=0
    " turn off automatically comment next line
    au filetype * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
    " use cpp syntax for c# to enable folding
    au filetype cs setlocal syntax=cpp
augroup end
" }}}

" {{{ Plugin
" Install vim-plugin if not exist.
if empty(glob('$USERPROFILE/vimfiles/autoload/plug.vim'))
    exe 'silent !curl -fLo '.$USERPROFILE.'\vimfiles\autoload\plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Plugins we use
call plug#begin()
Plug 'ctrlpvim/ctrlp.vim'				" fuzzy find file and open.
Plug 'itchyny/lightline.vim'			" great status line.
Plug 'tomtom/tcomment_vim'				" comment wrapped region.
Plug 'ntpeters/vim-better-whitespace'	" display annoying whitespaces.
" Plug 'scrooloose/nerdtree'				" File explorer.
" Plug 'lrvick/Conque-Shell'				" run shell inside vim.
" Plug 'ervandew/supertab'				" tab to complete.
"Plug 'vim-syntastic/syntastic'			" syntax checker.
" Plug 'majutsushi/tagbar'				" tags in side bar, function list.
" Plug 'jiangmiao/auto-pairs'				" complete braces automatically.
"Plug 'terryma/vim-multiple-cursors'		" multiple cursors.
call plug#end()
" }}}

" {{{ Key Mapping
" <leader>s edit .vimrc
map <leader>s :Vimrc<CR>
" \<space> source .vimrc
map <leader><space> :source $MYVIMRC<CR>
" <F2> for toggle paste mode
set pastetoggle=<F2>
" When yank in visual mode, cursor will stay at the last character.
vnoremap y y`]
" go to next/previous tab.
nnoremap <leader>[ :tabp<CR>
nnoremap <leader>] :tabn<CR>
" go to next/previous buffer.
nnoremap <C-[><C-b> :bp<CR>
nnoremap <C-]><C-b> :bn<CR>
" resize splited window.
nnoremap <leader>= :vertical resize +4<CR>
nnoremap <leader>- :vertical resize -4<CR>
nnoremap <leader>0 <C-w>=
"double click <Esc> to set nohls
nnoremap <Esc><Esc> :nohlsearch<Bar>:echo<CR>
"<leader>b to build.
nnoremap <leader>b :ccl<CR>:wa<CR>:silent make\|redraw!\|copen<CR><C-W>t<C-W>H
"<Ctrl-j> to next error.
nnoremap <C-j> :cnext<CR>
"<leader>i to display invisible characters.
nnoremap <leader>i :set list!<CR>
" }}}

" {{{ Custom Highlight
" Clang Comment
autocmd filetype c,cpp syn match   myLINK   "https\=://\S*"
autocmd filetype c,cpp syn keyword myREF    contained REF
autocmd filetype c,cpp syn keyword myDEBUG  contained DEBUG
autocmd filetype c,cpp syn keyword myTODO   contained TODO
autocmd filetype c,cpp syn keyword myNOTE   contained NOTE
autocmd filetype c,cpp syn keyword myLEARN  contained LEARN
autocmd filetype c,cpp syn keyword myNAME   contained WHAN Whan whan DAVID David
autocmd filetype c,cpp syn cluster cCommentGroup    add=myTODO,myNOTE,myLEARN,myNAME,myDEBUG

highlight myDEBUG   cterm=bold              ctermfg=Green       ctermbg=none
highlight myTODO    cterm=bold              ctermfg=Yellow      ctermbg=none
highlight myNOTE    cterm=bold              ctermfg=Blue        ctermbg=none
highlight myLEARN   cterm=bold,standout     ctermfg=Yellow      ctermbg=none
highlight myNAME    cterm=italic,underline  ctermfg=DarkGreen   ctermbg=none
highlight myREF     cterm=bold,underline    ctermfg=225         ctermbg=none
highlight link myLINK myREF
" }}}

" {{{ Custom Command
" Toggle auto comment
let g:NoAutoComment=1
function! ToggleAutoComment()
  if g:NoAutoComment == 1
	setlocal formatoptions+=cro
	let g:NoAutoComment = 0
  else
	setlocal formatoptions-=cro
	let g:NoAutoComment = 1
  endif
endfunction
command! Comment call ToggleAutoComment()

" Tab2Space & Space2Tab
:command! -range=% -nargs=0 Tab2Space execute '<line1>,<line2>s#^\t\+#\=repeat(" ", len(submatch(0))*' . &ts . ')'
:command! -range=% -nargs=0 Space2Tab execute '<line1>,<line2>s#^\( \{'.&ts.'\}\)\+#\=repeat("\t", len(submatch(0))/' . &ts . ')'

" Open vimrc
if has('win32')
    let VimrcFile="~/_vimrc"
else
    let VimrcFile="~/.vimrc"
endif
command! Vimrc execute 'e '.VimrcFile

" Open git-bash
" Get both x64/x86 "Program Files" path
if !exists("g:ProgramFilesPath64")
    let g:ProgramFilesPath64=substitute(substitute(system("echo %ProgramW6432%"), '[\r\n]\+', '', ''), '\s\+$', '', '')
endif
if !exists("g:ProgramFilesPath32")
    let g:ProgramFilesPath32=substitute(substitute(system("echo %ProgramFiles(x86)%"), '[\r\n]\+', '', ''), '\s\+$', '', '')
endif
function! OpenGitBash()
    if has('win32')
        let a:GitExeutePath="/Git/git-bash.exe"
        " Check if git-bash is installed.
        if !empty(g:ProgramFilesPath64) && !empty(glob(g:ProgramFilesPath64.a:GitExeutePath))
            let a:DefaultShell=&shell
            let &shell=g:ProgramFilesPath64.a:GitExeutePath
            silent! shell
            let &shell=a:DefaultShell
        elseif !empty(g:ProgramFilesPath32) && !empty(glob(g:ProgramFilesPath32.a:GitExeutePath))
            let a:DefaultShell=&shell
            let &shell=g:ProgramFilesPath32.a:GitExeutePath
            silent! shell
            let &shell=a:DefaultShell
        else
            echo "git-bash not installed!"
        endif
    else
        echo "Not on win32 platform!"
    endif
endfunction
command! GitBash call OpenGitBash()
" }}}

" {{{ Misc
"""" Json Formatter
function! FormatJSON()
  %!python -m json.tool
endfunction
autocmd filetype json nnoremap <leader>f :call FormatJSON()<CR>
" }}}
