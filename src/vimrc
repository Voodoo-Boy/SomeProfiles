"""" Desc: wanghan's .vimrc
"""" Date: 2018.04.11

"""" General settings
filetype indent plugin on	" turn on filtype detection, indent, plugin.
set ruler		" line number, column number, relative position at right bottom.
set wrap		" wrap too long line.
set hls			" highlight search results.
set noshowmode	" we use lightline plugin instead of default status line.
set tabstop=4	" tab width=4.
set shiftwidth=4
set showmatch	" show match brackets.
"set cindent	" this is automatically set for .c/.cpp/.C filetype.
set cinoptions=g-1	" cindent style.
set foldmethod=syntax
set foldlevel=20	" set fold level to not fold at first.
set cursorline		" highlight current line.
set laststatus=2	" always display status line.
syntax on
autocmd Filetype * setlocal formatoptions-=c formatoptions-=r formatoptions-=o		" turn off automatically comment next line.
" set encoding=latin1			" terminal output encoding
" set fileencoding=latin1		" file output encoding

"""" Remeber last exit postion for file
" Tell vim to remember certain things when we exit
"  '10  :  marks will be remembered for up to 10 previously edited files
"  "100 :  will save up to 100 lines for each register
"  :20  :  up to 20 lines of command-line history will be remembered
"  %    :  saves and restores the buffer list
"  n... :  where to save the viminfo files
set viminfo='10,\"100,:20,%,n~/.viminfo
function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END

"""" Set color scheme
" Now I think colorscheme is a bit dazzling.
" let g:molokai_original = 1
" let g:rehash256 = 1
" colorscheme molokai

"""" vim-plugin (vim plugin manager)
" Install vim-plugin if not exist.
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

"""" Handy Plugins.
call plug#begin()
Plug 'ctrlpvim/ctrlp.vim'				" fuzzy find file and open.
Plug 'itchyny/lightline.vim'			" great status line.
Plug 'tomtom/tcomment_vim'				" comment wrapped region.
Plug 'ntpeters/vim-better-whitespace'	" display annoying whitespaces.
" Plug 'scrooloose/nerdtree'				" File explorer.
" Plug 'lrvick/Conque-Shell'				" run shell inside vim.
" Plug 'ervandew/supertab'				" tab to complete.
"Plug 'vim-syntastic/syntastic'			" syntax checker.
" Plug 'majutsushi/tagbar'				" tags in side bar, function list.
" Plug 'jiangmiao/auto-pairs'				" complete braces automatically.
"Plug 'terryma/vim-multiple-cursors'		" multiple cursors.
call plug#end()

"""" Settings for plugins
" TBC

"""" Key mapping
" '\<space>' reload .vimrc
map <leader><space> :source ~/.vimrc<CR>
" <F2> for toggle paste.
set pastetoggle=<F2>
" <F3> for toggle auto comment at new line.
let g:wh_noAutoComment=1
function! ToggleAutoComment()
  if g:wh_noAutoComment == 1
	setlocal formatoptions+=cro
	let g:wh_noAutoComment = 0
  else
	setlocal formatoptions-=cro
	let g:wh_noAutoComment = 1
  endif
endfunction
nnoremap <F3> :call ToggleAutoComment()<CR>
inoremap <F3> <ESC>:call ToggleAutoComment()<CR>
" w!! to call sudo save
cnoremap w!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!
" map <Down> and <Up> so they go through wrapped lines.
nnoremap <Down> gj
nnoremap <Up> gk
" When yank in visual mode, cursor will stay at the last character.
vnoremap y y`]
" go to next/previous tab.
nnoremap <leader>[ :tabp<CR>
nnoremap <leader>] :tabn<CR>
" go to next/previous buffer.
nnoremap <C-[><C-b> :bp<CR>
nnoremap <C-]><C-b> :bn<CR>
" go to next/previous compile error.
nnoremap <C-[><C-m> :cp<CR>
nnoremap <C-]><C-m> :cn<CR>
" go to next/previous syntax error.
nnoremap <C-[><C-j> :lprevious<CR>
nnoremap <C-]><C-j> :lnext<CR>
" resize splited window.
nnoremap <leader>= :vertical resize +4<CR>
nnoremap <leader>- :vertical resize -4<CR>
nnoremap <leader>0 <C-w>=
"double click <Esc> to set nohls
nnoremap <Esc><Esc> :nohlsearch<Bar>:echo<CR>

"""" Misc

"""" Json Formatter
function! FormatJSON()
  %!python -m json.tool
endfunction
autocmd filetype json nnoremap <leader>f :call FormatJSON()<CR>

"""" Customized Comment highlights
" Clang
autocmd filetype c,cpp syn match   myLINK   "https\=://\S*"
autocmd filetype c,cpp syn keyword myREF    contained REF
autocmd filetype c,cpp syn keyword myDEBUG  contained DEBUG
autocmd filetype c,cpp syn keyword myTODO   contained TODO
autocmd filetype c,cpp syn keyword myNOTE   contained NOTE
autocmd filetype c,cpp syn keyword myLEARN  contained LEARN
autocmd filetype c,cpp syn keyword myNAME   contained WHAN Whan whan DAVID David
autocmd filetype c,cpp syn cluster cCommentGroup    add=myTODO,myNOTE,myLEARN,myNAME,myDEBUG

highlight myDEBUG   cterm=bold              ctermfg=Green       ctermbg=none
highlight myTODO    cterm=bold              ctermfg=Yellow      ctermbg=none
highlight myNOTE    cterm=bold              ctermfg=Blue        ctermbg=none
highlight myLEARN   cterm=bold,standout     ctermfg=Yellow      ctermbg=none
highlight myNAME    cterm=italic,underline  ctermfg=DarkGreen   ctermbg=none
highlight myREF     cterm=bold,underline    ctermfg=225         ctermbg=none
highlight link myLINK myREF

"""" Tab2Space & Space2Tab
:command! -range=% -nargs=0 Tab2Space execute '<line1>,<line2>s#^\t\+#\=repeat(" ", len(submatch(0))*' . &ts . ')'
:command! -range=% -nargs=0 Space2Tab execute '<line1>,<line2>s#^\( \{'.&ts.'\}\)\+#\=repeat("\t", len(submatch(0))/' . &ts . ')'



"""""""""""""""""""""""""""""""""""""""" Deprecated """"""""""""""""""""""""""""""""""""""""
"""" Deprecated Key Binding

" " Ctrl-Backspace delete word. (Deprecated because undefined behavior on different terminal)
" noremap! <C-h> <C-w>

" " set alt+q to switch clipboard. (Deprecated because of troublesome dependency)
" " this require vim has clipboard support, vim -version | grep clipboard, check +clipboard and +xterm_clipboard
" " vim-tiny not support (vim-gtk, vim-gome does) so deprecate.
" let s:wh_sysClipboard=0
" function! ToggleClipBoard()
" 	if (s:wh_sysClipboard == 0)
" 		let s:wh_sysClipboard=1
" 		set clipboard='unnamed'
" 	else
" 		let s:wh_sysClipboard=0
" 		set clipboard&
" 	endif
" endfunction
" noremap <M-q> :call ToggleClipBoard()

" " Eanble terminal to receive ALT/META key (Deprecated because <alt>/<meta> is in use of many terminals' shortcuts)
" let c='a'
" while c <= 'z'
"   exec "set <A-".c.">=\e".c
"   exec "imap \e".c." <A-".c.">"
"   let c = nr2char(1+char2nr(c))
" endw
"
" set ttimeout ttimeoutlen=50

" " Customized Replace Command (Deprecated because not useful)
" let g:a = 123
" function! MyReplaceFunc(src, target)
"   " exec '%s/' . a:src . '/'. a:target . '/gc'
"   let g:a = '%s/' . a:src . '/'. a:target . '/gc'
"   echo g:a
" endfunction
"
" command! -nargs=* MyReplace call MyReplaceFunc(<f-args>)

"""" Deprecated Plugin Setting
"""""""""""""""" NERDTree
" " autocmd vimenter * NERDTree					" Open NERDTree when open vim.
" " autocmd StdinReadPre * let s:std_in=1		" Open NERDTree if no files are specified.
" " autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" autocmd StdinReadPre * let s:std_in=1			" Open NERDTree when open a directory.
" autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
" " Map <Ctrl+N> to open NERDTree
" noremap <C-n> :NERDTreeToggle<CR>
" " Close vim if NERDTree is the only window left open.
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" " let g:NERDTreeDirArrowExpandable = '▸'		" Use these variables if need customized symbols.
" " let g:NERDTreeDirArrowCollapsible = '▾'
" " filetype to ignore.
" " let NERDTreeIgnore = ['\.pyc', '\.git$', '\~$', '\.swo$', '\.hg', '\.svn', '\.bzr', '\.DS_Store']
"
" " NERDTress File highlighting
" function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
"  exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
"  exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
" endfunction
"
" call NERDTreeHighlightFile('cpp', 'blue', 'none', 'green', '#151515')		" Edit your favorite <filetype, colors> here.
" call NERDTreeHighlightFile('h', 'yellow', 'none', 'green', '#151515')
" call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
" call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
" call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
" call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
" call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
" call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
" call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
" call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
" call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
" call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
" call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
" call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
" call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')

"""""""""""""""" Syntastic
" " set statusline+=%#warningmsg#
" " set statusline+=%{SyntasticStatuslineFlag()}
" " set statusline+=%*
"
" let g:syntastic_always_populate_loc_list = 1	" Always fill locaion-list with errors found by checkers.
" let g:syntastic_auto_loc_list = 1				" Pop location-list window automatically.
" let g:syntastic_auto_jump = 1					" Jump to first error automatically.
" let g:syntastic_check_on_wq = 0					" Do not check on :wq.
" let g:syntastic_enable_balloons = 0				" No ballons because we have no mouse.
" let g:syntastic_mode_map = {
" 		\ "mode": "passive",
" 		\ "active_filetypes": [],
" 		\ "passive_filetypes": [] }
"
" noremap <leader>c :SyntasticCheck<CR>

"""""""""""""""" Auto-Pairs
" let g:AutoPairsMapCh = 0					" Disable <C-H> for delete braces.
" let g:AutoPairsMoveCharacter = ""			" Disable <M-(>, <M-)>...
" let g:AutoPairsMapSpace = 0					" Disable insert space automatically.
" let g:AutoPairsCenterLine = 0				" Disable auto move to middle line after return.
" " Close auto pair for .mynote files.
" let b:autopairs_enabled=0
" autocmd filetype cpp
"     \ autocmd BufWinEnter * let b:autopairs_enabled=1

"""""""""""""""" Tagbar
" let g:tagbar_autofocus = 1					" Auto jump to tagbar when open tagbar.
" let g:tagbar_zoomwidth = 0					" Zoom to fix longest tag.
" let g:tagbar_sort = 0						" List code as the order in source code.
" " let g:tagbar_indent = 1					" Tag's indent in tag bar.
" let g:tagbar_previewwin_pos = "botright"	" Postion of the preview window=bottom right.
"
" nnoremap <C-m><C-m> :TagbarToggle<CR>
" " <leader>+o to close preview window.
" nnoremap <leader>o <C-w><C-z>

"""""""""""""""" Multiple-Cursors
" " map start key separately from next key.
" let g:multi_cursor_start_key='<M-m>'
" let g:multi_cursor_exit_from_visual_mode = 0
" let g:multi_cursor_exit_from_insert_mode = 0

"""""""""""""""" Display Whitespaces
" let g:better_whitespace_filetypes_blacklist=['<filetype1>', '<filetype2>', '<etc>']
" ['diff', 'gitcommit', 'unite', 'qf', 'help', 'markdown']

